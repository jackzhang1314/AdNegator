version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: adnegator-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: adnegator_pro
      POSTGRES_USER: adnegator
      POSTGRES_PASSWORD: adnegator_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - adnegator-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adnegator -d adnegator_pro"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: adnegator-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass adnegator_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - adnegator-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # API 服务器
  api-server:
    build:
      context: .
      dockerfile: packages/api-server/Dockerfile
      target: development
    container_name: adnegator-api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://adnegator:adnegator_password@postgres:5432/adnegator_pro
      REDIS_URL: redis://:adnegator_redis_password@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./packages/api-server:/app/packages/api-server
      - ./packages/shared:/app/packages/shared
      - /app/node_modules
      - /app/packages/api-server/node_modules
    ports:
      - "3001:3001"
    networks:
      - adnegator-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web 应用
  web-app:
    build:
      context: .
      dockerfile: packages/web-app/Dockerfile
      target: development
    container_name: adnegator-web
    restart: unless-stopped
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3001
    volumes:
      - ./packages/web-app:/app/packages/web-app
      - ./packages/shared:/app/packages/shared
      - /app/node_modules
      - /app/packages/web-app/node_modules
    ports:
      - "3000:3000"
    networks:
      - adnegator-network
    depends_on:
      - api-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI 引擎服务
  ai-engine:
    build:
      context: .
      dockerfile: packages/ai-engine/Dockerfile
      target: development
    container_name: adnegator-ai
    restart: unless-stopped
    environment:
      NODE_ENV: development
      REDIS_URL: redis://:adnegator_redis_password@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./packages/ai-engine:/app/packages/ai-engine
      - ./packages/shared:/app/packages/shared
      - /app/node_modules
      - /app/packages/ai-engine/node_modules
    networks:
      - adnegator-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: adnegator-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - adnegator-network
    depends_on:
      - web-app
      - api-server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: adnegator-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - adnegator-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana 仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: adnegator-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3004:3000"
    networks:
      - adnegator-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  adnegator-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
